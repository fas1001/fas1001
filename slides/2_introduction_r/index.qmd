---
title: "Cours 2 : Introduction à R"
subtitle: "Introduction aux mégadonnées en sciences sociales"
author: Laurence-Olivier M. Foisy
institute: Université de Montréal
lang: fr
from: markdown+emoji
format:
  revealjs:
    mermaid: 
      theme: dark
    theme: simple
    logo: https://upload.wikimedia.org/wikipedia/en/thumb/4/4b/Universite_de_Montreal_logo.svg/1920px-Universite_de_Montreal_logo.svg.png
    footer: "[FAS1001](https://fas1001.com)"
    transition: slide
    transition-speed: fast
    code-fold: false
    code-overflow: wrap
---

## Objectifs du cours{.smaller}

- Introduire R pour l'analyse de données.
  - Les dataframes
  - Les fonctions
  - Les packages 
  - Les graphiques
  - Les statistiques

> Le but est que vous puissiez sortir d'ici avec une compréhension de base de R et que vous soyez capable d'aller chercher des ressources pour continuer à apprendre.

## Qu'est-ce que l'analyse de données?{.smaller}

> L'analyse de données vise à explorer, décrire et interpréter des informations recueillies sur les comportements humains, les relations sociales et les phénomènes sociétaux. **Ce processus peut inclure des données quantitatives (comme des données issus de sondages) et des données qualitatives (comme des entretiens ou des observations)**.

::: {.incremental}
Principales étapes de l'analyse de données :

1. Acquisition des données
2. Préparation des données
3. Analyse des données
4. Communication des résultats
:::


## Les outils d'analyse de données{.smaller}

![](https://upload.wikimedia.org/wikipedia/commons/e/ea/SPSS_logo.svg){.absolute top=400 left=100 width="20%"}

![](https://upload.wikimedia.org/wikipedia/commons/7/79/Stata_logo_med_blue.png){.absolute top=150 left=800 width="20%"}

![](https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/800px-Python-logo-notext.svg.png){.absolute top=400 left=800 width="20%"}

![](https://upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Julia_Programming_Language_Logo.svg/1024px-Julia_Programming_Language_Logo.svg.png){.absolute top=100 left=100 width="20%"}

![](https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/R_logo.svg/1024px-R_logo.svg.png){.absolute top=200 left=330 width="40%"}


## Pourquoi R?{.smaller}

![](https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/R_logo.svg/1024px-R_logo.svg.png){.absolute top=0 left=800 width="20%"}

<br><br>

### Open source

- Gratuit
- Collaboratif
- Communauté active
  - StackExchange
  - stackoverflow
  - reddit.com/r/Rlanguage 
- Adapté aux besoins des utilisateurs

:::{.notes}
Open source c'est un modèle de développement de logiciels où le code est accessible à tous. Dans un logiciel open source, ce code est publié publiquement, permettant à n'importe qui de le lire, le modifier, le partager, et l'améliorer.
:::

## Pourquoi R?{.smaller}

![](https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/R_logo.svg/1024px-R_logo.svg.png){.absolute top=0 left=800 width="20%"}

<br><br>

### Packages

- Offre une extension des fonctionnalités de base presque infinie
- Peux répondre à des besoins très spécifiques
- 21,744 packages sur CRAN (Comprehensive R Archive Network)
  - Principal dépôt où sont hébergés les packages R
- Beaucoup plus sur GitHub
  - En plus de CRAN, de nombreux chercheurs publient leurs packages sur GitHub, une plateforme de partage de code

:::{.notes}
Chaque tâche spécifique lié à l'analyse de donnéees peut être automatisé et facilité par R. Collègue récemment à la CLESSN catégorisé les code postaux à la main. 
:::

## Pourquoi R?{.smaller}

![](https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/R_logo.svg/1024px-R_logo.svg.png){.absolute top=0 left=800 width="20%"}

<br><br>

### Packages CLESSN

<!-- NOTE: Ajouter descriptions packages -->

- [sondr](https://github.com/clessnverse/sondr)
  - Permet l'automatisation de plusieurs aspects de l'analyse de données. Nous permet de faire des analyses factorielles en quelques secondes.
- [clellm](https://github.com/clessn/clellm)
  - Permet d'utiliser des LLM open-source directement en R et permet d'utiliser des fonctions disponibles seulement en Python, en R.
- [clessnize](https://github.com/clessnverse/clessnize)
  - Permet de standardiser le style de nos graphiques rapidement sans avoir à répéter les mêmes étapes à chaque fois.

## Pourquoi R?{.smaller}

![](https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/R_logo.svg/1024px-R_logo.svg.png){.absolute top=0 left=800 width="20%"}

<br><br>

### Reproductibilité

- Rendre les analyses [reproductibles](https://github.com/clessn/beyond_multiple_choices)
- Permet de partager les analyses
  - Les scripts R permettent de partager facilement le travail
- Permet de retracer les erreurs
- Partager le code
  - Encourage la transparence et la collaboration dans la recherche

## Pourquoi R?{.smaller}

![](https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/R_logo.svg/1024px-R_logo.svg.png){.absolute top=0 left=800 width="20%"}

<br><br>

### Très utilisé en science sociale

- Beaucoup de ressources
- Beaucoup de tutoriels orientés vers les sciences sociales
  - Datacamp
  - swirl()
  - Coursera

#### Bref... important d'utiliser les mêmes outils que les chercheurs dans votre domaine

## Pourquoi R?{.smaller}

![](https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/R_logo.svg/1024px-R_logo.svg.png){.absolute top=0 left=800 width="20%"}

<br><br>

### Exemples d'utilisation par des organisations

- [Utilisé par AirBnB pour l'analyse de données](https://medium.com/airbnb-engineering/using-r-packages-and-education-to-scale-data-science-at-airbnb-906faa58e12d)

- [Utilisé par la BBC pour leurs graphiques](https://bbc.github.io/rcookbook/)

- [Utilisé par la MLB pour l'analyse de données](https://billpetti.github.io/baseballr/)

- [Utilisé par Vox Pop Labs (Boussole électorale) pour l'analyse de données](https://github.com/voxpoplabs)

- [Utilisé par Google, Facebook, Amazon, etc.](https://makemeanalyst.com/companies-using-r/)



## Pourquoi R?{.smaller}

### La CLESSN 

![](https://www.clessn.com/assets/img/logo-black.svg){.absolute top=420 left=630 width="30%"}
![](img/yaduf.png){.absolute top=300 left=0 width="35%"}
Chaire de leadership en enseignement des sciences sociales numériques (CLESSN)


::::{.columns}

:::{.column width="50%"}
- Titulaire: Yannick Dufresne
:::

:::{.column width="50%"}
- Objectif: Développer des compétences en science des données pour les étudiants en sciences sociales à travers des projets de recherche et des formations
:::

::::

## [Datagotchi](https://usa.datagotchi.com){.smaller}

![](img/datagotchi_usa.png){.absolute top=0 left=850 width="30%"}

::::{.columns}

:::{.column width="80%"}

- Application utilisant des variables lifestyles pour prédire le vote
- Utiliser R et l'analyse de données à travers ce projet:
  - Prototypage en Shiny
  - Nettoyage des données
  - Analyse factorielle
  - Régressions et modèles
  - Visualisation

:::

:::{.column width="20%"}
:::

::::

## 

![](img/datagotchi_graph.png){.absolute top=0 left=0 width="200%"}

::: {.r-stack}

![](img/cartogram.png){.fragment .absolute top=0 left=0 width="200%"}

![](img/turnout.png){.fragment .absolute top=0 left=0 width="200%"}

::: 


## Analyse textuelle{.smaller}

- Analyse de ton 
  - Est-ce que le texte est positif ou négatif?

![](img/time_series_by_article.png){.absolute top=200 left=70 width="80%"}  

## Mais aussi ...{.smaller}

- Catégorisation de texte 
  - Est-ce que le texte parle de politique, de santé, de sport?
- Analyse d'image
- Transcription audio

## R : Au-delà de l'analyse de données{.smaller}

- R ne se limite pas à l'analyse statistique, il peut aussi être utilisé pour développer des [applications web interactives](https://mdubel.shinyapps.io/shark-attack/)

![](img/shinygotchi_front.png)

## Après R

### Apprendre R vous permet de comprendre d'autres langages de programmation

- Python
- Julia
- SQL
- JavaScript
- HTML/CSS
- Bash 

## Installer R et RStudio{.smaller}

- C'est quoi la différence entre R et RStudio?
- R est le moteur, RStudio est le véhicule
- R est le langage, RStudio est la feuille de papier
- RStudio facilite l'utilisation de R
- RStudio est un IDE (Integrated Development Environment)
- Personnalisation de l'environnement de travail

<br><br>

### À télécharger :

- [Installer R](https://cran.r-project.org/)
- [Installer RStudio](https://www.rstudio.com/products/rstudio/download/)

## {background-image="img/rstudio.png"}
## {background-image="img/rstudio_script.png"}
## {background-image="img/rstudio_console.png"}
## {background-image="img/rstudio_files.png"}
## {background-image="img/rstudio_env.png"}

## Avant de commencer : Concept important {.smaller}

### Le chemin d'arborescence

- À tout moment vous devez savoir où vous êtes dans votre ordinateur pour pouvoir importer des données, exporter des graphiques ou mettre des fichiers en relation
- Votre R pointe toujours vers un endroit spécifique dans votre ordinateur. Vous devez savoir où pour pouvoir importer des données
- La fonction `getwd()` dans R permet de savoir où vous êtes

![](https://habefast.ch/wp-content/uploads/2022/03/habefast-infographies-web-arborescence.png){.absolute top=400 left=75 width="80%"}

## Avant de commencer : Concept important{.smaller}

### Planifier avant de coder

#### La plus grosse erreur est de commencer à coder sans savoir ce que vous voulez faire

<br>

- Clarifer vos objectifs: Qu'est-ce que vous voulez faire?
  - Nettoyer des données?
  - Faire un graphique?

Les possibilités sont infinies, donc il est important de savoir où vous voulez aller

## Avant de commencer : Concept important{.smaller}

### Décomposer le problème

- Une fois que vous savez ce que vous voulez faire, il est important de décomposer le problème en petites étapes
- Un script R pour une seule tâche
  - Bien nommer vos scripts pour savoir ce qu'ils font
  - Exemples:
    - `1_collecte.R`
    - `2_nettoyage.R`
    - `3_analyse.R`
    - `4_graphique.R`
- Chaque script doit être clair et facile à comprendre
- Commenter votre code avec des `#`

## Importer des données{.smaller}

- Les données sont souvent dans des fichiers Excel, CSV, ou autres
  - On utilise des fonctions comme `read.csv()` pour lire les fichiers 

<br>

```r
df <- read.csv("chemin/vers/data.csv")
```
<br>

- Dans cette ligne de code il y a plusieurs éléments importants:
  - Le nom de l'objet : `df` dans ce cas-ci, c'est un dataframe
  - L'opérateur d'assignation : `<-` 
  - La fonction qui permet de lire le fichier : `read.csv()`
  - Le chemin vers le fichier : `"chemin/vers/data.csv"`

## Chemins d'arborescence{.smaller}

#### Important de comprendre comment spécifier le chemin vers un fichier

Voici les deux façons de spécifier le chemin :

- Absolu: `/Users/username/Documents/projet/data/data.csv`
  - Utile seulement sur votre ordinateur, un autre utilisateur ne pourra pas utiliser le même chemin

- Relatif: `data/data.csv`
  - Utile pour partager le code avec d'autres utilisateurs
  
<br>

#### Différence entre mac et windows

- Mac: `/`
- Windows: `\` (il faut s'assurer de changer les `\` pour des `/`)


## Importer des données{.smaller}

Autres fonctions pour importer des données dépendamment du format:

- `df <- readxl::read_excel("chemin/vers/data.xlsx")`
- `df <- readRDS("chemin/vers/data.rds")`

![](img/df_in_env.png){.absolute top=300 left=150 width="70%"}

## Anatomie d'une ligne de code {.smaller}

Prenons un exemple simple :
```r
resultat <- mean(df$age, na.rm = TRUE)
```

Décomposons cette ligne :

- `resultat` : nom de l'objet où on stocke le résultat
- `<-` : opérateur d'assignation
- `mean()` : fonction qui calcule la moyenne
- `df$age` : variable 'age' du dataframe 'df'
- `na.rm = TRUE` : argument de la fonction (ignorer les NA)

::::{.notes}
Cette ligne de code calcule la moyenne de la variable 'age' en ignorant les valeurs manquantes (NA) et stocke le résultat dans un objet nommé 'resultat'
::::

## Les types de données dans R {.smaller}

### Types de base :

- `numeric` : nombres (avec ou sans décimales)
```r
age <- 25        # integer
taille <- 1.75   # double
```

- `character` : texte (chaînes de caractères)
```r
nom <- "Pierre"
ville <- 'Montréal'  # simple ou double quotes
```

- `logical` : TRUE ou FALSE
```r
est_etudiant <- TRUE
a_un_emploi <- FALSE
```

## Les types de données dans R {.smaller}

### Types spéciaux :

- `factor` : catégories
```r
niveau <- factor(c("Débutant", "Intermédiaire", "Avancé"))
```

- `Date` : dates
```r
date <- as.Date("2025-01-14")
```

- `NA` : valeurs manquantes
```r
donnees <- c(1, NA, 3, NA, 5)
```

## Parenthèses, guillemets et virgules {.smaller}

### Les parenthèses () :
- Délimitent les arguments d'une fonction
- Doivent toujours être fermées
```r
# Correct
moyenne <- mean(donnees)

# Incorrect - parenthèse manquante
moyenne <- mean(donnees
```

### Les virgules :
- Séparent les arguments d'une fonction
```r
# Correct
resultat <- sum(1, 2, 3, na.rm = TRUE)

# Incorrect - virgule manquante
resultat <- sum(1 2 3, na.rm = TRUE)
```

## Assignation : = vs <- {.smaller}

### L'opérateur <- :
- Recommandé pour l'assignation de variables
- Plus clair et explicite
- Standard dans la communauté R
```r
age <- 25
nom <- "Alice"
```

### L'opérateur = :
- Utilisé principalement pour les arguments de fonctions
- Peut créer de la confusion
```r
# Pour les arguments de fonction
mean(x = donnees, na.rm = TRUE)

# Éviter pour l'assignation
age = 25  # Fonctionne mais non recommandé
```

## Messages d'erreur courants {.smaller}

### Erreur de syntaxe
```r
# Message d'erreur
Error: unexpected symbol in "mon code"

# Cause probable
# Parenthèse ou guillemet manquant
```

### Objet non trouvé
```r
# Message d'erreur
Error: object 'data' not found

# Causes probables
# - Faute de frappe dans le nom
# - Objet non créé
# - Mauvais working directory
```

## Messages d'erreur (suite) {.smaller}

### Comment réagir aux erreurs :

1. Ne pas paniquer ! Les erreurs sont normales
2. Lire attentivement le message d'erreur
3. Vérifier la ligne indiquée dans le message
4. Points à vérifier :
   - Parenthèses fermées ?
   - Guillemets fermés ?
   - Virgules aux bons endroits ?
   - Noms d'objets corrects ?
   - Package chargé (`library()`) ?

::::{.notes}
Encourager les étudiants à voir les erreurs comme des opportunités d'apprentissage
::::

# Codons!

## Nous allons utiliser le dataframe `swiss`{.smaller}

```r
# Charger les packages nécessaires
library(dplyr) # Manipulation de données
library(ggplot2) # Graphiques

# Importer les données swiss (jeu de données intégré)
df <- swiss

# Explorer les données
View(df)
summary(df)
names(df)
head(df)
ncol(df)
nrow(df)

```

## Analyse rapide d'une variable

```r
# Voir le nombre de valeurs pour chaque élément d'une variable
table(df$Fertility)

# Histogramme de la variable 'Fertility'
hist(df$Fertility)

# Obtenir la moyenne de la variable 'Fertility'
mean(df$Fertility)

```

- `$` permet d'accéder à une variable dans un dataframe.
- On accède à la variable `Fertility` dans le dataframe `df` avec `df$Fertility`

## Filter et sélectionner des variables

```r
# Sélectionner des colonnes 
# (par exemple, Fertility, Education et Agriculture)

df_selected <- df %>%
  select(Fertility, Education, Agriculture)

# Filtrer les lignes pour inclure uniquement les cantons 
# avec une fertilité supérieure à la moyenne

mean_fertility <- mean(df_selected$Fertility, na.rm = TRUE)

df_filtered <- df_selected %>%
  filter(Fertility > mean_fertility)
```

## Modifier des variables

```r
# Créer une nouvelle variable binaire "high_agriculture" 
# indiquant si le pourcentage d'agriculture est supérieur à 50

df_mutated <- df_filtered %>%
  mutate(high_agriculture = ifelse(Agriculture > 50, 1, 0))

# Regrouper par "high_agriculture" et calculer la moyenne de l'éducation

df_summarized <- df_mutated %>%
  group_by(high_agriculture) %>%
  summarize(moyenne_education = mean(Education, na.rm = TRUE))

# Afficher le résultat final
print(df_summarized)
```

## Représentation graphique des données{.smaller}

### Principes généraux de la visualisation

- Montrer les données 
  - Évitez les distractions inutiles
- Choisir des visualisations appropriées 
  - Quelles informations seront utiles ?
- Éviter les graphiques « spaghetti » 
  - Évitez les lignes trop complexes qui se chevauchent et s'entremêlent
- Commencer en noir et blanc 
  - Utiliser les couleurs de manière efficace

## Visualisation avec ggplot2{auto-animate=true}

### Initialiser un graphique

```{.r code-line-numbers="1"}
ggplot(df, aes(x = Agriculture, y = Fertility, color = Education)) 
```
- `df` est le dataframe
- `aes()` est la fonction qui permet de spécifier les variables à utiliser
- `x` et `y` sont les variables à utiliser pour les axes x et y
- `color` est la variable à utiliser pour la couleur

## Visualisation avec ggplot2{auto-animate=true}

### Ajouter un geom_()

```{.r code-line-numbers="2"}
ggplot(df, aes(x = Agriculture, y = Fertility, color = Education)) +
  geom_point(alpha = 0.8) # Le alpha est la transparence
```

- Il existe plusieurs `geom_()` pour différents types de graphiques
  - `geom_point()` est pour un nuage de points
  - `geom_line()` est pour un graphique en ligne
  - `geom_bar()` est pour un graphique en barres
  - `geom_histogram()` est pour un histogramme

## Visualisation avec ggplot2{auto-animate=true}

### Ajouter une échelle de couleur

```{.r code-line-numbers="3"}
ggplot(df, aes(x = Agriculture, y = Fertility, color = Education)) +
  geom_point(alpha = 0.8) + # Le alpha est la transparence
  scale_color_gradient(low = "blue", high = "red", name = "Éducation") 
```

- `scale_color_gradient()` permet de spécifier les couleurs pour la variable `Education`
- `low` et `high` sont les couleurs pour les valeurs les plus basses et les plus hautes
- `name` est le nom de la légende
- Vous pouvez utiliser les hexcodes pour les couleurs

## Visualisation avec ggplot2{auto-animate=true}

### Ajouter des titres et des labels

```{.r code-line-numbers="4,5,6,7,8"}
ggplot(df, aes(x = Agriculture, y = Fertility, color = Education)) +
  geom_point(alpha = 0.8) + # Le alpha est la transparence
  scale_color_gradient(low = "blue", high = "red", name = "Éducation") +
  labs(
    title = "Relation entre l'agriculture et la fertilité en Suisse",
    x = "Pourcentage d'agriculture",
    y = "Fertilité"
  ) 
```

## Visualisation avec ggplot2{auto-animate=true}

### Ajouter un thème

```{.r code-line-numbers="9"}
ggplot(df, aes(x = Agriculture, y = Fertility, color = Education)) +
  geom_point(alpha = 0.8) + # Le alpha est la transparence
  scale_color_gradient(low = "blue", high = "red", name = "Éducation") +
  labs(
    title = "Relation entre l'agriculture et la fertilité en Suisse",
    x = "Pourcentage d'agriculture",
    y = "Fertilité"
  ) +
  theme_minimal()
```

- `theme_minimal()` est un thème minimaliste
- Il existe plusieurs thèmes prédéfinis dans ggplot2
- Vous pouvez aussi créer votre propre thème

## Visualisation avec ggplot2{auto-animate=true}

### Sauvegarder le graphique

```{.r code-line-numbers="11"}
ggplot(df, aes(x = Agriculture, y = Fertility, color = Education)) +
  geom_point(alpha = 0.8) + # Le alpha est la transparence
  scale_color_gradient(low = "blue", high = "red", name = "Éducation") +
  labs(
    title = "Relation entre l'agriculture et la fertilité en Suisse",
    x = "Pourcentage d'agriculture",
    y = "Fertilité"
  ) +
  theme_minimal()

ggsave("nom_du_graphique.png", width = 10, height = 6)
```

- Vous pouvez spécifier le format du graphique (png, pdf, etc.) ainsi que le chemin pour sauvegarder le graphique

## Visualisation avec ggplot2{auto-animate=true}

### Un histogramme de la variable Fertility

```r
ggplot(df, aes(x = Fertility)) +
  geom_histogram(fill = "skyblue", color = "white", bins = 5) +
  labs(
    title = "Distribution de la fertilité en Suisse",
    x = "Fertilité",
    y = "Nombre de cantons"
  ) +
  theme_minimal()
```

## Analyse statistique

```r
# Calculer la corrélation entre Fertility et Agriculture

correlation <- cor(df$Fertility, df$Agriculture)
print(paste("Corrélation entre Fertility et Agriculture:", round(correlation, 2)))

# Effectuer une régression linéaire avec Fertility comme variable dépendante

modele <- lm(Fertility ~ Agriculture, data = df)

# Afficher le résumé du modèle de régression

summary(modele)
```

## Bonnes pratiques

### [style.tidyverse.org](https://style.tidyverse.org/)

- Utilisé par la communauté R pour standardiser le style du code
- Utilisé par [Google](https://google.github.io/styleguide/Rguide.html) 
- Utilisé par des packages populaires comme [stylr](https://styler.r-lib.org/) et [lintr](https://lintr.r-lib.org/)

## Bonnes pratiques {.smaller}

### Règles générales :

- Nommer vos fichiers de manière descriptive
- Utiliser des minuscules seulement et aucun caractère spécial comme é ou à
- Si vos fichiers contiennent plusieurs mots, les séparer par des underscores `_`
- Exemple: `nettoyage_donnees.R`
- Utiliser des chiffres pour ordonner vos scripts
- Évitez d'écrire des lignes de code trop longues
- Utiliser la convention `snake_case` plutôt que `camelCase`
- Nommez vous dataframe de façon standard. `df_` ou `data_`

## Organiser votre environnement de travail

```bash
votre_projet
├── data
│   ├── processed
│   │   └── data_clean.csv
│   └── raw
│       └── data_raw.csv
├── docs
│   └── article
│       ├── articles.qmd
│       └── references.bib
├── R
│   ├── 2_analysis.R
│   └── 3_graph.R
├── README.md
└── results
    └── graphs
        └── 1_bar_graph.png
 
```

## En apprendre plus{.smaller} 

- [swirl](https://swirlstats.com/students.html)
- [Datacamp](https://www.datacamp.com/)
- [R4DS (R for Data Science)](https://r4ds.had.co.nz/)
- [Advanced R](https://adv-r.hadley.nz/)


## Ressources{.smaller}

Quoi faire quand ça ne fonctionne pas?

- ChatGPT
  - Être clair et précis dans vos requêtes
  - Expliquer la structure de vos données
  - Copier-coller le message d'erreur
  - Copier-coller la documentation d'un package
- Réessayer ChatGPT
  - C'est rare que ChatGPT ne trouve pas la réponse
- La documentation de R (ex: `?mean()` dans votre console)
- Google
  - Stackoverflow
  - Stackexchange

## Conclusion
