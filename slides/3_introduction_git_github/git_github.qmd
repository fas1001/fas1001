---
title: "Cours 3 : Introduction à git, GitHub et Quarto"
subtitle: "Introduction aux mégadonnées en sciences sociales"
author: Laurence-Olivier M. Foisy
institute: Université de Montréal
lang: fr
from: markdown+emoji
format:
  revealjs:
    mermaid: 
      theme: dark
    theme: simple
    logo: https://upload.wikimedia.org/wikipedia/en/thumb/4/4b/Universite_de_Montreal_logo.svg/1920px-Universite_de_Montreal_logo.svg.png
    footer: "[FAS1001](https://fas1001.com)"
    transition: slide
    transition-speed: fast
    code-fold: false
    code-overflow: wrap
---

## Des questions sur le dernier cours?

- Avez-vous essayé l'exercice?
- Le path?
- Le balais dans RStudio

## À voir aujourd'hui

### Le reste des outils que nous utiliserons cette session:

- Terminal
- Git
- GitHub
- Quarto

##

![](img/outils_recherche.png)

# Terminal

## À propos du terminal{.smaller}

- Pas du code mais des commandes
- Chaque commande est une application
- Un explorateur de fichier
- À tout moment vous êtes dans une location précise, dans un répertoire ou un dossier

## Terminal

::::{.columns}

:::{.column width=50%}

### macOS

- Terminal

![](https://upload.wikimedia.org/wikipedia/commons/b/b3/Terminalicon2.png){width=50%}

:::

:::{.column width=50%}

### Windows

- PowerShell

![](img/powershell.png)

:::

::::

## Pourquoi utiliser le terminal?

- Compréhension accru de l'ordinateur et de votre arborescence
- Plusieurs outils ne sont disponibles que dans le terminal
- Se familiariser avec la console de R
- Git est concentré sur le terminal

- Meilleure raison: Parce que c'est le fun!

## Liste de commandes utiles{.center .smaller}

- `ls` - Liste les fichiers et dossiers dans le répertoire courant
- `cd` - Change de répertoire
- `mkdir` - Crée un nouveau dossier
- `rm` - Supprime un fichier
- `cp` - Copie un fichier
- `mv` - Déplace ou renomme un fichier 
- `cat` - Affiche le contenu d'un fichier
- `git` - Gestionnaire de version

## DataCamp

### [Introduction to Shell](https://learn.datacamp.com/courses/introduction-to-shell)

![](img/datacamp_shell.png)

# Git

## Git{.smaller}

::::{.columns}

:::{.column width=50%}

- Créé par Linus Torvalds en 2005
- Gestion de version
- Permet de suivre l'évolution d'un projet
- Utile pour tout ce qui est texte, incluant les articles et les présentations
- Enregistre tous les changements faits depuis la création du projet (.git)
- Reproductibilité et transparence

:::

:::{.column width=50%}

![](img/meme_versions.jpg)

:::

::::

## Important

- Télécharger et installer Git depuis [git-scm.com](git-scm.com)

- Configurer git avant de commencer à l'utiliser

- Dans le terminal:

```bash
git config --global user.name "username"
git config --global user.email votre@email.com
git config --global credential.helper store
```
<!--`-->

# GitHub

## Git{.smaller transition="none"}

![](img/git.png)

## GitHub{.smaller transition="none"}

![](img/git_github.png)


## GitHub

- GitHub = Git + Internet

- Plateforme de développement collaboratif
- Héberge des projets Git
- Acheté par Microsoft pour 7.5 milliards de dollars
- Lieu d'entreposage de plusieurs projets open source

## Projets open source sur GitHub

::::{.columns}

:::{.column}
- [Linux](https://github.com/torvalds/linux)
- [Bitcoin](https://github.com/bitcoin/bitcoin)
- [Model Summary](https://github.com/vincentarelbundock/modelsummary)
- [RStudio](https://github.com/rstudio)
- [Zotero](https://github.com/zotero/zotero)
:::
:::{.column}
- [Overleaf](https://github.com/overleaf/overleaf)
- [ggplot2](https://github.com/tidyverse/ggplot2)
- [Advanced-R](https://github.com/hadley/adv-r)
- [Python](https://github.com/python)

:::
::::

## Ajouter vos accès{.smaller}

- Créer un compte GitHub :
- Générer un token d'accès classique :
    - Connectez-vous à GitHub et allez dans vos Paramètres.
    - Dans la section Developer Settings, cliquez sur Personal Access Tokens, puis sur Tokens (classic).
    - Créez un nouveau token en cliquant sur Generate new token (classic).
    - Choisissez la durée illimité et donnez tous les accès        
    - Copiez le token généré, car vous ne pourrez plus le visualiser après avoir quitté cette page.
    
- Quand Git demandera un identifiant et un mot de passe, entrez :
    - Identifiant : votre nom d'utilisateur GitHub.
    - Mot de passe : collez le token que vous avez généré.

## Comment l'utiliser?{.smaller}

1. Cloner un projet existant sur votre ordinateur.
  - Ce projet est maintenant un dossier sur votre ordinateur. Vous pouvez le modifier, le supprimer, le déplacer, etc.


```bash
git clone https://lien/vers/repo.git
```

2. Modifier le projet, ajouter des fichiers, etc.

```bash
git pull 
git add votre_fichier_1 votre_fichier_2
git commit -m "Message de commit"
git push
```

## Organiser votre répertoire et placer vos données{.smaller}

```bash
/votre_projet
├── data
│   ├── processed
│   │   └── data_clean.csv
│   └── raw
│       └── data_raw.csv
├── docs
│   └── article
│       ├── articles.qmd
│       └── references.bib
├── R
│   ├── 1_analysis.R
│   └── 2_graph.R
├── README.md
└── results
    └── graphs
        └── 1_bar_graph.png        
```

## .gitignore{.smaller}

- Fichier texte qui spécifie les fichiers et dossiers à ignorer
- Les fichiers et dossiers spécifiés dans le .gitignore ne seront pas suivis par Git
- Exemple de contenu d'un .gitignore
  - `*.csv` - Ignore tous les fichiers .csv
  - `data/` - Ignore le dossier data
  - `.Rproj` - Ignore tous les fichiers .Rproj
  - `.Renviron` - Ignore le fichier .Renviron

## Les README.md{.smaller}

- Fichier principal pour présenter et documenter un projet
- Doit inclure une description claire du projet, comment l'installer et l'utiliser
- Souvent écrit en Markdown (.md)
- Contient des instructions pour contribuer et des informations sur les dépendances et les licences

- Exemple de structure :

  - Titre du projet
  - Description
  - Comment installer
  - Comment utiliser
  - Comment contribuer

## Branches{.smaller}

- Dans notre contexte, une branche est un chapitre, une section, un élément de votre projet

![](img/branch.webp)

## Contribuer? Pull requests (PR){.smaller}

- Les pull requests permettent à d'autres utilisateurs de proposer des modifications à votre projet
- Processus de collaboration :
  - Un contributeur crée une branche avec ses changements
  - Une PR est ouverte pour soumettre ces changements
  - Le propriétaire du projet peut commenter, demander des modifications ou accepter la PR

- Important pour :

  - Suivi des modifications
  - Discussion autour des changements
  - Validation avant intégration

## [Datacamp](https://app.datacamp.com/learn/skill-tracks/github-foundations)

![](img/datacamp_github.png)

# Quarto

## Langages de balisage{.smaller}

::::{.columns}

:::{.column width=60%}

- Permettent de structurer un document avec des balises
- Séparent le contenu de la mise en forme
- Exemples courants :
  - HTML pour le web
  - LaTeX pour documents scientifiques
  - Markdown pour la simplicité

:::

:::{.column width=40%}

![](https://upload.wikimedia.org/wikipedia/commons/4/48/Markdown-mark.svg){width=50%}

:::

::::

## Historique des langages de balisage

![](img/timeline_markup.png)


## Lanages de balisage{.smaller}

::::{.columns}

:::{.column width=60%}

- ![](https://priv.au/image_proxy?url=https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2Fthumb%2F9%2F92%2FLaTeX_logo.svg%2F2560px-LaTeX_logo.svg.png&h=5bbd23b97bc133701ccafb5e61f367f211f422b02a699aae711b14e0ef0b2633){width=40%}
- ![](https://priv.au/image_proxy?url=https%3A%2F%2Fupload.wikimedia.org%2Fwikipedia%2Fcommons%2F4%2F48%2FMarkdown-mark.svg&h=5c031353f5a7e170d152730497ecd7f3f3b2de5b2c1d14465f0b215efa217858), ![](https://priv.au/image_proxy?url=https%3A%2F%2Frstudio.github.io%2Fcheatsheets%2Fhtml%2Fimages%2Flogo-quarto.png&h=2b8bda8401b6ed48df7273da04f5cd5a122cea5d0b62d49ca17f260b5717253a){width=15%}
- ![](https://priv.au/image_proxy?url=https%3A%2F%2Fstyles.redditmedia.com%2Ft5_83esp8%2Fstyles%2FcommunityIcon_eytolmfg1gra1.png&h=1b16a38469e43d038e49a52d4efdc768b69e079eed846bc7267acc9bc1f23e1e){width=20%}

:::

:::{.column width=40%}
### Lequel choisir?

Ils sont tous bons!
:::

::::

## Pourquoi Quarto? {.smaller}

- Très facile à utiliser
- Inclus avec RStudio
- Possibilité d'inclure du LaTeX si nécessaire
- Templates facile à créer et à utiliser

```zsh
quarto use template fas1001/gabarit_udem_science_po
```

![](https://r4ds.hadley.nz/images/quarto-flow.png)

## Pourquoi se compliquer la vie?{.smaller}

::::{.columns}

:::{.column width=80%}

- Open source - Adapté à nos besoins
- Automatisation - Répétabilité
- Compatibilité - Windows, MacOS, Linux
- Versatilité (HTML, PDF, Word, etc.)
- Approche philosophique différente des logiciels de traitement de texte comme `Word`

:::

:::{.column width=20%}

![](img/word_logo.png){width="300%" }

:::

::::

## Courbe d'apprentissage

![](https://inzaneresearch.com/wp-content/uploads/2018/06/sfhtj.jpg?w=840)

## `Quarto`

- Markdown amélioré
- Possibilité d'utiliser plusieurs langage de programmation comme `Julia` ou `Python`.
- Possibilité d'utiliser plusieurs `IDE` comme `RStudio` ou `VScode`.
- `Quarto` permet de faire des belles présentations, livres, rapports de recherche, thèses, site web.

## Comment utiliser Markdown{.smaller}

::::{.columns}

:::{.column width=50%}

```markdown

### Titre de niveau 3

#### Titre de niveau 4

**Texte en gras**
_Texte en italique_

@citation dans le texte
En fin de phrase [@citation].

> Bloc de citation

Texte normal, écriture, blablabla.
```

:::

:::{.column width=50%}

### Titre de niveau 3

#### Titre de niveau 4

**Texte en gras**

_Texte en italique_

Auteur (année) dans le texte

En fin de phrase (Auteur, année).

> Bloc de citation

Texte normal, écriture, blablabla.

:::

::::

## Comment utiliser Markdown{.smaller}

::::{.columns}

:::{.column width=50%}

```markdown
- Liste à puce
- Liste à puce 
  1. Sous-liste à numéro
  2. Sous-liste à numéro
      1. Sou-sous liste à numéro
        - Sous-sous-sous liste à puce

![](https://mdg.imgix.net/assets/images/tux.png?auto=format&fit=clip&q=40&w=100)
![](img/terminal.png)

```

:::

:::{.column width=50%}

- Liste à puce
- Liste à puce 
  1. Sous-liste à numéro
  2. Sous-liste à numéro
      1. Sou-sous liste à numéro
        - Sous-sous-sous liste à puce

![](https://mdg.imgix.net/assets/images/tux.png?auto=format&fit=clip&q=40&w=100)
![](img/powershell.png)

:::

::::

## Fichiers .bib

```bib
@book{salganik2019bit,
  title={Bit by bit: Social research in the digital age},
  author={Salganik, Matthew J},
  year={2019},
  publisher={Princeton University Press}
}
```


## YAML Header

```yaml

---
author: "Laurence-Olivier"
title: "Le YAML"
subtitle: "C'est quoi?"
date: today
format:
  pdf:
    documentclass: article
    geometry: 
      - margin=2.5cm
    fontsize: 12pt
    mainfont: "TeX Gyre Termes"
    header-includes: |
      \usepackage[french]{babel}
bibliography: references.bib
csl: https://raw.githubusercontent.com/citation-style-language/styles/master/chicago-author-date.csl
---

```



## Le TP1

[Lien vers le TP1 sur GitHub Classrooms](https://classroom.github.com/a/zxD7k-73)

# Conclusion

<!-- 
Tex 1978
Word 1983
LaTeX 1984
Power Points 1987
HTML 1993
Beamer 2003
Markdown 2004
Google Docs 2006
Pandoc 2009
Microsoft 365 2013
Libre Office 2014
Quarto 2022
Typst 2023
-->

