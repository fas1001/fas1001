---
title: "Cours 3 : Introduction à git, GitHub et Quarto"
subtitle: "Introduction aux mégadonnées en sciences sociales"
author: Laurence-Olivier M. Foisy
institute: Université de Montréal
lang: fr
from: markdown+emoji
format:
  revealjs:
    mermaid: 
      theme: dark
    theme: simple
    logo: https://upload.wikimedia.org/wikipedia/en/thumb/4/4b/Universite_de_Montreal_logo.svg/1920px-Universite_de_Montreal_logo.svg.png
    footer: "[FAS1001](https://fas1001.com)"
    transition: slide
    transition-speed: fast
    code-fold: false
    code-overflow: wrap
---

## Des questions sur le dernier cours?

- Le path
- Le balais dans RStudio

## À voir aujourd'hui

### Le reste des outils que nous utiliserons cette session:

- Terminal
- Git
- GitHub
- Quarto

##

![](img/outils_recherche.png)

# Terminal

## À propos du terminal{.smaller}

- Ce que vous entrez dans le terminal n'est pas du code, mais des commandes avec des instructions
- Les commandes sont des applications qui sont déjà installées sur votre ordinateur
- Le terminal est l'équivalent d'un explorateur de fichiers, mais en mode texte
- À tout moment vous êtes dans une location précise, dans un répertoire ou un dossier

## Terminal

::::{.columns}

:::{.column width=50%}

### macOS

- Terminal

![](img/terminal.png){width=50%}

:::

:::{.column width=50%}

### Windows

- PowerShell

![](img/powershell.png)

:::

::::

## Pourquoi utiliser le terminal?

- Compréhension accru de l'ordinateur et de votre arborescence
- Plusieurs outils ne sont disponibles que dans le terminal
- Se familiariser avec la console de R
- Git est concentré sur le terminal

- Meilleure raison: Parce que c'est le fun!

## Liste de commandes utiles{.center .smaller}

- `ls` - Liste les fichiers et dossiers dans le répertoire courant
- `cd` - Change de répertoire
- `mkdir` - Crée un nouveau dossier
- `rm` - Supprime un fichier
- `cp` - Copie un fichier
- `mv` - Déplace ou renomme un fichier 
- `cat` - Affiche le contenu d'un fichier
- `git` - Gestionnaire de version

## DataCamp

### [Introduction to Shell](https://learn.datacamp.com/courses/introduction-to-shell)

![](img/datacamp_shell.png)

# Git

## Git{.smaller}

::::{.columns}

:::{.column width=50%}

- Créé par Linus Torvalds en 2005
- Gestion de version
- Permet de suivre l'évolution d'un projet
- Utile pour tout ce qui est texte, incluant les articles et les présentations
- Enregistre tous les changements faits depuis la création du projet (.git)
- Reproductibilité et transparence

:::

:::{.column width=50%}

![](img/meme_versions.jpg)

:::

::::

## Important

- Télécharger et installer Git depuis [git-scm.com](git-scm.com)

- Configurer git avant de commencer à l'utiliser

  - Dans le terminal:

```bash
git config --global user.name "username"
git config --global user.email votre@email.com
git config --global credential.helper store
```
<!--`-->


# GitHub

## Git{.smaller transition="none"}

![](img/git.png)

## GitHub{.smaller transition="none"}

![](img/git_github.png)


## GitHub

- GitHub = Git + Internet

- Plateforme de développement collaboratif
- Héberge des projets Git
- Acheté par Microsoft pour 7.5 milliards de dollars
- Lieu d'entreposage de plusieurs projets open source

## Projets open source sur GitHub

::::{.columns}

:::{.column}
- [Linux](https://github.com/torvalds/linux)
- [Bitcoin](https://github.com/bitcoin/bitcoin)
- [Model Summary](https://github.com/vincentarelbundock/modelsummary)
- [RStudio](https://github.com/rstudio)
- [Zotero](https://github.com/zotero/zotero)
:::
:::{.column}
- [Overleaf](https://github.com/overleaf/overleaf)
- [ggplot2](https://github.com/tidyverse/ggplot2)
- [Advanced-R](https://github.com/hadley/adv-r)
- [Python](https://github.com/python)

:::
::::

## Ajouter vos accès{.smaller}

- Créer un compte GitHub :
- Générer un token d'accès classique :
    - Connectez-vous à GitHub et allez dans vos Paramètres.
    - Dans la section Developer Settings, cliquez sur Personal Access Tokens, puis sur Tokens (classic).
    - Créez un nouveau token en cliquant sur Generate new token (classic).
    - Choisissez la durée illimité et donnez tous les accès        
    - Copiez le token généré, car vous ne pourrez plus le visualiser après avoir quitté cette page.
    
- Quand Git demandera un identifiant et un mot de passe, entrez :
    - Identifiant : votre nom d'utilisateur GitHub.
    - Mot de passe : collez le token que vous avez généré.

## Comment l'utiliser?{.smaller}

1. Cloner un projet existant sur votre ordinateur.
  - Ce projet est maintenant un dossier sur votre ordinateur. Vous pouvez le modifier, le supprimer, le déplacer, etc.


```bash
git clone https://lien/vers/repo.git
```

2. Modifier le projet, ajouter des fichiers, etc.

```bash
git pull 
git add votre_fichier_1 votre_fichier_2
git commit -m "Message de commit"
git push
```

## Organiser votre répertoire et placer vos données{.smaller}

```bash
/votre_projet
├── data
│   ├── processed
│   │   └── data_clean.csv
│   └── raw
│       └── data_raw.csv
├── docs
│   └── article
│       ├── articles.qmd
│       └── references.bib
├── R
│   ├── 1_analysis.R
│   └── 2_graph.R
├── README.md
└── results
    └── graphs
        └── 1_bar_graph.png        
```

## .gitignore{.smaller}

- Fichier texte qui spécifie les fichiers et dossiers à ignorer
- Les fichiers et dossiers spécifiés dans le .gitignore ne seront pas suivis par Git
- Exemple de contenu d'un .gitignore
  - `*.csv` - Ignore tous les fichiers .csv
  - `data/` - Ignore le dossier data
  - `.Rproj` - Ignore tous les fichiers .Rproj
  - `.Renviron` - Ignore le fichier .Renviron

## Les README.md{.smaller}

- Fichier principal pour présenter et documenter un projet
- Doit inclure une description claire du projet, comment l'installer et l'utiliser
- Souvent écrit en Markdown (.md)
- Contient des instructions pour contribuer et des informations sur les dépendances et les licences

- Exemple de structure :

  - Titre du projet
  - Description
  - Comment installer
  - Comment utiliser
  - Comment contribuer

## Branches{.smaller}

- Dans notre contexte, une branche est un chapitre, une section, un élément de votre projet

![](img/branch.webp)

## Contribuer? Pull requests (PR){.smaller}

- Les pull requests permettent à d'autres utilisateurs de proposer des modifications à votre projet
- Processus de collaboration :
  - Un contributeur crée une branche avec ses changements
  - Une PR est ouverte pour soumettre ces changements
  - Le propriétaire du projet peut commenter, demander des modifications ou accepter la PR

- Important pour :

  - Suivi des modifications
  - Discussion autour des changements
  - Validation avant intégration

[À vous de contribuer au livre d'outils](https://github.com/clessn/livre-outils)

## GitHub pages

- GitHub pages vous permet d'héberger un site web gratuitement
- GitHub permet aussi de lier un nom de domaine à votre site
- Idéal pour votre portfolio de chercheur


[Gabarit de site web](https://github.com/clessn/gabarit_site_web)

# Quarto

## Les langages de balisage{.smaller}

- C'est quoi un **"Markup language"**

- Tout simplement une façon de formater du texte

- Approche philosophique différente des logiciels de traitement de texte comme `Word`

## Historique des langages de balisage

![](img/timeline_markup.png)

## Code $\LaTeX$

::: {style="text-align:center;"}
![](img/latex-code-cv.png){.fragment width="1500" height="900"}
:::

## Templates accessibles

```bash
quarto use template fas1001/gabarit_udem_science_po
```

## Pourquoi se compliquer la vie...?

::: {style="text-align:center;"}
![](img/word_logo.png){.fragment width="650" height="700"}
:::

### Parce-que...

-   C'est gratuit et accessible à tous et à toutes...
-   Indépendance des plateformes d'utilisation: `Mac`, `Windows`, `Linux`. Offre une consistance d'une plateforme à une autre.
-   Automatisation, utile pour la collaboration en recherche.
-   Utilisation dans plusieurs `IDE` (ou `integrated development environment`) comme `RStudio` ou `VScode`.
-   Peut produire différents types de fichiers: `PDF`, `HTML`, et oui même le fameux `.docx` de `Word`...

------------------------------------------------------------------------

## `Quarto` {background-image="img/quarto_rmarkdown.png"}

## `Quarto`

- Markdown amélioré
- Possibilité d'utiliser plusieurs langage de programmation comme `Julia` ou `Python`.
- Possibilité d'utiliser plusieurs `IDE` comme `RStudio` ou `VScode`.
- `Quarto` permet de faire des belles présentations, livres, rapports de recherche, thèses, site web.

## `Quarto`

-   Permet de faire des visualisations avec `Shiny` dans des présentations et des rapports.
-   Exemple: [Shiny de la Chaire](https://pol3015leselections.shinyapps.io/_shiny_electoral/){preview-link="true"}
-   [Autre exemple](https://jjallaire.shinyapps.io/kmeans-shiny-ojs/){preview-link="true"}

## Le TP1

[Lien vers le TP1 sur GitHub Classrooms](https://classroom.github.com/a/zxD7k-73)

## Conclusion

<!-- 
Tex 1978
Word 1983
LaTeX 1984
Power Points 1987
HTML 1993
Beamer 2003
Markdown 2004
Google Docs 2006
Pandoc 2009
Microsoft 365 2013
Libre Office 2014
Quarto 2022
Typst 2023
-->

